// Code generated by go-bindata.
// sources:
// ../../openapi/ocm-smtp-service.yaml
// DO NOT EDIT!

package openapi

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _ocmSmtpServiceYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x58\x5f\x6f\xdb\x46\x12\x7f\xd7\xa7\x18\xe0\xee\xa0\x3b\xc0\x96\xe4\xcb\xdd\x43\x05\xe4\x21\x49\x9b\x22\x41\x1c\xa7\xb1\xd3\x3e\x14\x85\x3d\x22\x47\xe2\xc6\xe4\x2e\x33\x33\xb4\xad\xa0\x1f\xbe\xd8\x5d\x51\xa4\xa8\xff\x41\x0a\xa7\x40\xf5\x24\x2e\x7f\x33\x3b\x7f\x7f\x3b\x4b\x57\x92\xc5\xd2\x8c\xe1\xc9\x60\x34\x18\xf5\x8c\x9d\xba\x71\x0f\x40\x8d\xe6\x34\x86\x8b\x17\xe7\x70\x79\x7e\xf5\x0e\x2e\x89\xef\x4c\x42\xf0\xec\xdd\xab\x1e\x40\x4a\x92\xb0\x29\xd5\x38\x3b\x86\x73\xb4\x38\x23\x89\xb8\x84\x29\x25\xab\x06\x73\xe9\x01\xdc\x11\x4b\xc0\x8c\x06\xa3\xc1\x59\x4f\x88\xfd\x8a\xd7\x7f\x0a\x15\xe7\x63\xc8\x54\x4b\x19\x0f\x87\x58\x9a\x81\xb7\x44\x32\x33\xd5\x41\xe2\x8a\x1e\xc0\xda\x36\xc6\xc2\xbf\x4b\x76\x69\x95\xf8\x95\xff\x40\x54\xb7\x59\x99\x28\xce\x68\x9f\xca\x4b\xc5\x99\xb1\xb3\x35\x45\xc3\x75\x68\x52\x31\x93\x55\x48\x5d\x81\xc6\xf6\x4a\xd4\x2c\xf8\xe1\x37\x1b\xba\xa4\x38\x95\x42\xcb\x53\x89\x51\x1a\xde\x9d\x0d\xfd\xf3\x38\xe8\x99\x91\xc6\x3f\x00\x52\x15\x05\xf2\x7c\x0c\xef\x49\x2b\xb6\x02\x08\xb9\x11\x05\x37\x0d\xd1\xab\x51\x94\x54\x6c\x74\x5e\x4b\x79\xbb\x9e\x13\x32\xf1\x18\x7e\xfd\x6d\xb1\xc8\x24\xa5\xb3\x42\xd2\xa0\xfa\xff\x1d\x8d\xfa\xcd\x63\xc7\x83\x67\xf0\xfa\xf2\xe2\x2d\x20\x33\xce\xeb\x0d\xc1\x4d\x3e\x52\xa2\xd2\x92\x49\x9c\x55\xb2\xda\x56\x03\x80\x65\x99\x9b\x04\xbd\xa2\xe1\x47\x71\x76\xf5\x2d\x80\x24\x19\x15\xd8\x5d\x05\xf8\x27\xd3\x74\x0c\xfd\x7f\x0c\x13\x57\x94\xce\x92\x55\x19\x46\xac\x0c\xfd\xfe\x6f\x8c\x68\xbf\xb1\xff\x7f\xa3\xb3\x1d\xf6\x57\x9a\x81\xba\x5b\xb2\x60\x04\x8c\xbd\xc3\xdc\xa4\x8f\x61\xf8\x0f\xcc\x8e\x57\xac\x7e\xb2\xdd\xea\x0f\x16\x2b\xcd\x1c\x9b\xcf\x94\x82\x3a\x28\x89\xa7\x8e\x0b\x70\x25\x71\x30\xeb\x5b\xf0\xe0\xff\xbb\xea\xe6\x83\xa5\x87\x92\x12\xa5\x14\xc8\xcb\x81\x4b\x42\x33\x3c\x7e\xec\x4b\x64\x2c\x48\x17\x8c\x12\x7f\xa7\x1b\xc5\x1b\xe4\xb0\xc4\x19\xf5\x0f\x87\x8b\xf9\x7c\x14\x9c\x90\x93\xec\x08\x01\xc7\x29\xf1\xf3\x79\x94\x28\x9d\xac\x53\xc5\x0b\x26\x54\x02\x04\x4b\xf7\x5d\x8e\x3d\x8e\x30\x3e\x55\x24\xfa\xdc\xa5\x2d\xdc\x2a\x1d\x7a\xe5\x29\x2a\x2e\x5f\x7b\x19\xc3\x94\x8e\x41\xb9\xa2\xde\x8e\x74\xef\x4e\xf6\xe6\x54\xef\x63\x87\xfe\x4e\xaa\xdb\x41\x15\x31\x64\x8f\x52\xa0\x6d\xbb\x03\x37\xec\xe8\xac\x9f\x3d\x83\x85\xed\x63\x67\xc9\xb7\xd3\x5a\x7f\x93\xf1\x23\x7a\xf0\xdd\x76\x0f\x3a\xfd\x0f\x98\x33\x61\x3a\x07\x7a\x30\xf2\x38\xc7\xf8\x51\x67\xc9\x33\x0b\xd5\xb6\xe3\xc4\xbb\x85\xea\xc7\x31\xcd\x68\x0b\xd1\x3d\x86\x67\xcd\x1b\x2f\x5e\x53\xed\xa5\x07\xd5\x8c\xb4\xe0\xda\x85\x76\x9d\x97\x14\x87\xd1\x5e\x6b\x73\x1a\xc3\x24\xc0\x16\x8b\xf1\xe1\xa5\xe3\x02\x75\x0c\xaf\x7f\xb9\xea\xd5\x56\x2e\x94\x5e\x84\xd1\xec\x3d\x4d\x89\xc9\x26\xb4\xaa\x3d\xce\x6d\xf5\x39\xc8\xbe\x80\xd5\xb4\x09\xd2\xa4\x6d\x67\xa3\x90\x28\x1b\x3b\x5b\x2e\xdf\x1a\xbb\x1f\x94\xf9\x00\xed\x02\xf9\x11\xee\x48\xdb\x0e\xda\xd8\x9f\xd3\xeb\x20\x63\x95\x66\xcb\x18\x02\xf8\xe3\x79\x3f\x4a\x9d\x62\xbe\x0f\xb6\x3c\xeb\x5a\x87\xa8\xb7\xb4\xf5\xe8\x6d\x6a\x3d\xfa\xcd\x5b\x8f\x61\x97\xd6\xb3\x51\x2a\x62\x4b\x86\x4a\xaa\xf5\x62\x9e\x5f\x4c\xf7\x0d\x2c\x75\x0d\x76\x8a\xa0\x3d\x58\x6c\x08\xf6\xb6\x80\x43\x68\x9b\x94\xba\xf5\xbf\x31\xf0\x31\x16\xb8\xa1\x89\xb6\xc2\x97\xfc\x79\xbd\x5a\x76\x1b\x85\x42\x30\xda\x55\x73\x54\x40\x56\x6f\x0c\x47\x47\x21\xe4\x64\xb3\x89\xe1\x62\xd4\x79\xb3\x11\x7e\x30\x1f\x7a\x0e\x7b\xe4\xac\x0b\xd9\xf4\x47\x36\xe9\xab\xef\x0f\x4e\x66\xd6\x1a\x42\xf7\x82\x4b\xc7\x87\x83\x35\xdf\x12\xfa\x0d\xd8\x4a\x88\x2d\x16\x87\x97\x6c\x89\x22\xf7\x8e\xf7\xd7\x5f\xfd\x4b\xe2\x90\x78\x8d\x87\x3b\x00\x30\x5d\xf0\x75\x8a\x4a\xa7\x6a\x0a\x5a\x35\xba\x4c\xbf\x96\xca\xfa\x76\xfc\xd7\x6d\x92\x8e\xc5\xcd\x6f\xb7\xed\xf5\x00\xdd\xbd\xdc\x35\xcc\x12\xca\x02\x96\xe3\xa6\xb1\x63\x28\x51\xb3\xc5\xe3\xca\xbc\x71\x95\x11\x98\x14\xdc\x14\x98\x12\xc7\x69\x97\xea\xdb\xd7\x9a\xee\x88\xb0\x96\xb2\xf6\x89\x14\x6d\x68\x9d\x07\xde\x8a\x4f\x15\xf1\x7c\x93\x19\xef\x70\x46\x60\xab\x62\x42\xdc\xd8\x12\xbf\xfc\xdc\x67\x64\x57\x16\xe8\x21\x21\x4a\x05\xa4\xa4\xc4\x4c\x0d\xa5\x61\x97\xf6\x59\xb3\xd9\xd0\xee\x99\x97\xd2\x14\xab\x5c\xc7\x70\xb6\x5c\x2a\x8c\x35\x45\x55\x34\x4b\x4d\x1c\xa6\x98\x4b\xd4\xdf\x3e\x51\xa3\x97\xad\xad\x77\x7a\x79\x8e\x0f\x5e\xfd\x9a\xa3\xe2\x47\x6d\x0e\x1f\xbc\xbe\xd0\x83\xd1\x68\xdd\x87\xd1\x2e\x1f\xc2\x2d\xbc\xe3\x45\x58\xdb\xe2\xc7\x26\x25\x1d\xef\x7e\x3f\x5d\xda\x70\xb9\x48\x8d\x84\x49\x35\x2a\x86\x84\x8d\x12\x1b\x1c\x84\xa2\x93\xb9\x55\x7c\xf0\x31\xd0\xcc\x48\x53\xcc\x60\xa4\x35\xbb\x14\x26\x47\xf6\xd1\xd1\x8e\x08\xc1\xf5\x7d\x46\x4c\xd7\x90\xe4\x58\x09\xf9\x55\xb4\x70\xf9\xd3\x1b\x10\x45\xa5\x82\xac\x9e\x2c\x15\x55\x52\x4f\xcd\xde\x55\xa9\x55\xf8\x39\x18\x50\x95\xcd\xa4\x52\x12\x18\x42\xe2\xf2\xaa\xb0\xab\x28\x4c\x12\x57\x59\x1d\xc0\x52\xdd\x4b\xc7\x40\x0f\x58\x94\x39\x9d\x80\xb1\x10\x3e\x51\x2c\x72\xc8\x86\xee\xc8\xb7\x76\x5b\x56\xe0\xde\x68\x06\xb8\x24\xed\xc6\x45\x45\x0e\x23\x7d\x00\xdc\x14\xf3\x9b\x26\xe9\xcb\x3f\x37\x37\x37\xf2\x29\x6f\x79\x13\x95\x40\x6e\x6e\x09\xfa\xc5\xfc\x5f\xfd\x36\x74\x5d\xfe\x6a\x3d\x09\x90\xa0\x05\xcc\xc5\xc1\x84\xe2\xdd\x80\x52\x70\xbe\xd1\x72\x4f\xd0\xc0\x24\xae\xe2\x84\x06\x5f\xe0\xb4\x54\x93\x65\x59\x08\xe4\x38\xa1\x9c\x52\x98\xcc\xe1\x66\xea\xdc\xd3\x09\xf2\xcd\xc9\x5e\x1f\xdb\x3a\xae\x83\x0a\x19\xdc\xd2\x1c\x9e\x42\x7f\xea\x5c\x1f\xd0\xa6\x1b\x31\x77\x98\x57\xe4\x51\x13\xe4\x3d\x51\x79\x15\xd3\xdb\xae\x3c\xdb\x57\xcf\xf9\x77\x26\xa5\xf4\x04\x1c\x83\x89\x98\xa8\xd5\x08\x50\x51\xea\xfc\xc4\xaf\x35\x37\xe1\xb5\x5c\x6b\x86\x1a\x56\x7c\xa2\x20\x43\xf1\xd7\xe8\xc2\x88\x18\x67\x7d\xc0\x84\x08\xee\x4d\x9e\xc3\xa4\xa9\x83\xd8\xfd\x94\x0e\x0e\xe5\xda\xc5\x67\xb1\xd5\x16\x5e\x2c\xfe\x09\x3d\x1c\xb3\x3d\x99\x7f\xf5\x2e\xae\x15\x1f\xd6\xc8\x93\x4a\x8f\x6e\xe6\x4e\x1b\x1f\x59\xd0\xcb\xac\x86\xd7\xb1\x8e\xd7\x47\xaf\xbd\xad\x8a\x92\xec\xae\xc6\x0b\xfe\x32\x1b\xe0\x1a\x6d\x7a\x0d\x53\xc3\xa2\x70\xbc\x51\x27\x51\xf2\xed\x41\x36\x7e\xad\x8e\xb1\x0e\xe8\xa1\xcc\x4d\x62\x34\xba\x14\x09\x30\x74\x44\x4d\x46\x07\x35\xc2\x1f\x01\x00\x00\xff\xff\x8a\x9d\xf3\xc8\x9b\x1b\x00\x00")

func ocmSmtpServiceYamlBytes() ([]byte, error) {
	return bindataRead(
		_ocmSmtpServiceYaml,
		"ocm-smtp-service.yaml",
	)
}

func ocmSmtpServiceYaml() (*asset, error) {
	bytes, err := ocmSmtpServiceYamlBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "ocm-smtp-service.yaml", size: 7067, mode: os.FileMode(420), modTime: time.Unix(1586941329, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"ocm-smtp-service.yaml": ocmSmtpServiceYaml,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"ocm-smtp-service.yaml": &bintree{ocmSmtpServiceYaml, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

